// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Tempo_ios_sdk
import AVFoundation
import CommonCrypto
import Compression
import CoreData
import CoreFoundation
import CoreLocation
import Foundation
import GLKit
import GameController
import ObjectiveC
import Swift
@_exported import Tempo_ios_sdk
import UIKit
import UserNotifications
public struct Entry : Swift.Equatable {
  public enum EntryType : Swift.Int {
    case file
    case directory
    case symlink
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public func path(using encoding: Swift.String.Encoding) -> Swift.String
  public var path: Swift.String {
    get
  }
  public var fileAttributes: [Foundation.FileAttributeKey : Any] {
    get
  }
  public var checksum: Tempo_ios_sdk.CRC32 {
    get
  }
  public var type: Tempo_ios_sdk.Entry.EntryType {
    get
  }
  public var compressedSize: Swift.Int {
    get
  }
  public var uncompressedSize: Swift.Int {
    get
  }
  public static func == (lhs: Tempo_ios_sdk.Entry, rhs: Tempo_ios_sdk.Entry) -> Swift.Bool
}
public class RSAMessage : Tempo_ios_sdk.Message {
  public var data: Foundation.Data
  public var base64String: Swift.String
  required public init(data: Foundation.Data)
  required convenience public init(base64String: Swift.String) throws
  public func sign(signingKey: Tempo_ios_sdk.RSAKey, digestType: Tempo_ios_sdk.RSASignature.DigestType) throws -> Tempo_ios_sdk.RSASignature
  public func verify(verifyKey: Tempo_ios_sdk.RSAKey, signature: Tempo_ios_sdk.RSASignature, digestType: Tempo_ios_sdk.RSASignature.DigestType) throws -> Swift.Bool
  @objc deinit
}
public typealias CRC32 = Swift.UInt32
public typealias Consumer = (Foundation.Data) throws -> Swift.Void
public typealias Provider = (Swift.Int, Swift.Int) throws -> Foundation.Data
public let crcTable: [Swift.UInt32]
extension Data {
  public func crc32(checksum: Tempo_ios_sdk.CRC32) -> Tempo_ios_sdk.CRC32
}
public class RSASignature {
  public enum DigestType {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public static func == (a: Tempo_ios_sdk.RSASignature.DigestType, b: Tempo_ios_sdk.RSASignature.DigestType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  convenience public init(base64Encoded base64String: Swift.String) throws
  public var base64String: Swift.String {
    get
  }
  @objc deinit
}
extension FileManager {
  public func zipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, shouldKeepParent: Swift.Bool = true, compressionMethod: Tempo_ios_sdk.CompressionMethod = .none, progress: Foundation.Progress? = nil) throws
  public func unzipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, progress: Foundation.Progress? = nil, preferredEncoding: Swift.String.Encoding? = nil) throws
}
extension URL {
  public func isContained(in parentDirectoryURL: Foundation.URL) -> Swift.Bool
}
public protocol StateType {
}
public typealias DispatchFunction = (Tempo_ios_sdk.Action) -> Swift.Void
public typealias Middleware<State> = (@escaping Tempo_ios_sdk.DispatchFunction, @escaping () -> State?) -> (@escaping Tempo_ios_sdk.DispatchFunction) -> Tempo_ios_sdk.DispatchFunction
public typealias Reducer<ReducerStateType> = (Tempo_ios_sdk.Action, ReducerStateType?) -> ReducerStateType
public struct ReSwiftInit : Tempo_ios_sdk.Action {
}
public protocol Action {
}
public protocol AnyStoreSubscriber : AnyObject {
  func _newState(state: Any)
}
public protocol StoreSubscriber : Tempo_ios_sdk.AnyStoreSubscriber {
  associatedtype StoreSubscriberStateType
  func newState(state: Self.StoreSubscriberStateType)
}
extension StoreSubscriber {
  public func _newState(state: Any)
}
public protocol DispatchingStoreType {
  func dispatch(_ action: Tempo_ios_sdk.Action)
}
public protocol Message {
  var data: Foundation.Data { get }
  var base64String: Swift.String { get }
  init(data: Foundation.Data)
  init(base64String: Swift.String) throws
}
extension Message {
  public var base64String: Swift.String {
    get
  }
}
public enum SwiftyCryptoRSAKeySize : Swift.Int {
  case RSAKey64
  case RSAKey128
  case RSAKey256
  case RSAKey512
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class RSAKeyFactory : ObjectiveC.NSObject {
  public static let shared: Tempo_ios_sdk.RSAKeyFactory
  public func generateKeyPair(keySize: Tempo_ios_sdk.SwiftyCryptoRSAKeySize) -> Tempo_ios_sdk.RSAKeyPair?
  @objc deinit
  @objc override dynamic public init()
}
public protocol StoreType : Tempo_ios_sdk.DispatchingStoreType {
  associatedtype State : Tempo_ios_sdk.StateType
  var state: Self.State! { get }
  var dispatchFunction: Tempo_ios_sdk.DispatchFunction! { get }
  func subscribe<S>(_ subscriber: S) where S : Tempo_ios_sdk.StoreSubscriber, Self.State == S.StoreSubscriberStateType
  func subscribe<SelectedState, S>(_ subscriber: S, transform: ((Tempo_ios_sdk.Subscription<Self.State>) -> Tempo_ios_sdk.Subscription<SelectedState>)?) where SelectedState == S.StoreSubscriberStateType, S : Tempo_ios_sdk.StoreSubscriber
  func unsubscribe(_ subscriber: Tempo_ios_sdk.AnyStoreSubscriber)
  func dispatch(_ actionCreator: Self.ActionCreator)
  func dispatch(_ asyncActionCreator: Self.AsyncActionCreator)
  func dispatch(_ asyncActionCreator: Self.AsyncActionCreator, callback: Self.DispatchCallback?)
  associatedtype DispatchCallback = (Self.State) -> Swift.Void
  associatedtype ActionCreator = (Self.State, Tempo_ios_sdk.StoreType) -> Tempo_ios_sdk.Action?
  associatedtype AsyncActionCreator = (Self.State, Tempo_ios_sdk.StoreType, (Self.ActionCreator) -> Swift.Void) -> Swift.Void
}
public enum HMACAlgorithm {
  case sha256
  case sha384
  case sha512
  public static func == (a: Tempo_ios_sdk.HMACAlgorithm, b: Tempo_ios_sdk.HMACAlgorithm) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension HMACAlgorithm {
  public var commonCryptoAlgorithm: CommonCrypto.CCHmacAlgorithm {
    get
  }
  public var commonCryptoDigestLength: Swift.Int32 {
    get
  }
}
public func hmac(algorithm: Tempo_ios_sdk.HMACAlgorithm, key: Foundation.Data, message: Foundation.Data) -> Foundation.Data
public struct TempoDynamicPoint {
  public enum PointType {
    case offer(productId: Swift.String, price: Swift.String, originalPrice: Swift.String, thumbnailUrl: Swift.String, showRoute: Swift.Bool, radius: Swift.Int)
    case event(startDate: Foundation.Date, finishDate: Foundation.Date, thumbnailUrl: Swift.String)
    case information
    case favorite
  }
  public init(id: Swift.Int, type: Tempo_ios_sdk.TempoDynamicPoint.PointType, cornerId: Swift.String, title: Swift.String, subtitle: Swift.String?, description: Swift.String?, startDateMap: Foundation.Date, finishDateMap: Foundation.Date)
}
public enum RSAKeyType {
  case PUBLIC
  case PRIVATE
  public static func == (a: Tempo_ios_sdk.RSAKeyType, b: Tempo_ios_sdk.RSAKeyType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct RSAKeyPair {
  public var privateKey: Tempo_ios_sdk.RSAKey
  public var publicKey: Tempo_ios_sdk.RSAKey
}
public class RSAKey {
  public var key: Security.SecKey
  public var keyBase64String: Swift.String
  public var data: Foundation.Data?
  public var keyType: Tempo_ios_sdk.RSAKeyType!
  public init(key: Security.SecKey, keyBase64String: Swift.String, keyType: Tempo_ios_sdk.RSAKeyType)
  public init(base64String: Swift.String, keyType: Tempo_ios_sdk.RSAKeyType) throws
  public static func base64StringWithoutPrefixAndSuffix(pemString: Swift.String) throws -> Swift.String
  public func pemString() throws -> Swift.String
  public func format(keyData: Foundation.Data, keyType: Tempo_ios_sdk.RSAKeyType) -> Swift.String
  @objc deinit
}
extension Archive {
  final public func extract(_ entry: Tempo_ios_sdk.Entry, to url: Foundation.URL, bufferSize: Swift.UInt32 = defaultReadChunkSize, progress: Foundation.Progress? = nil) throws -> Tempo_ios_sdk.CRC32
  final public func extract(_ entry: Tempo_ios_sdk.Entry, bufferSize: Swift.UInt32 = defaultReadChunkSize, progress: Foundation.Progress? = nil, consumer: (Foundation.Data) throws -> Swift.Void) throws -> Tempo_ios_sdk.CRC32
}
public struct RouteState : Tempo_ios_sdk.StateType {
}
@_hasMissingDesignatedInitializers public class Subscription<State> {
  public init(sink: @escaping (@escaping (State?, State) -> Swift.Void) -> Swift.Void)
  public func select<Substate>(_ selector: @escaping (State) -> Substate) -> Tempo_ios_sdk.Subscription<Substate>
  public func skipRepeats(_ isRepeat: @escaping (State, State) -> Swift.Bool) -> Tempo_ios_sdk.Subscription<State>
  public var observer: ((State?, State) -> Swift.Void)?
  @objc deinit
}
extension Subscription where State : Swift.Equatable {
  public func skipRepeats() -> Tempo_ios_sdk.Subscription<State>
}
extension Subscription {
  public func skip(when: @escaping (State, State) -> Swift.Bool) -> Tempo_ios_sdk.Subscription<State>
  public func only(when: @escaping (State, State) -> Swift.Bool) -> Tempo_ios_sdk.Subscription<State>
}
public enum AssistantState {
  case none, assigning, running, canceled, completed, canceledFromInternalError
  public static func == (a: Tempo_ios_sdk.AssistantState, b: Tempo_ios_sdk.AssistantState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct BuildingState : Tempo_ios_sdk.StateType {
}
public struct IndoorCenter {
  public let id: Swift.Int
  public let name: Swift.String
}
public struct AppState : Tempo_ios_sdk.StateType {
}
public struct Constants {
  public struct ENVIRONMENT {
    public static let dev: Swift.String
    public static let staging: Swift.String
    public static let production: Swift.String
  }
}
public enum SwiftyCryptoError : Swift.Error {
  case invalidBase64String
  case invalidKeyFormat
  case invalidAsn1Structure
  case asn1ParsingFailed
  case invalidAsn1RootNode
  case tagEncodingFailed
  case keyCreateFailed(error: CoreFoundation.CFError?)
  case keyAddFailed(status: Darwin.OSStatus)
  case keyCopyFailed(status: Darwin.OSStatus)
  case invalidDigestSize(digestSize: Swift.Int, maxChunkSize: Swift.Int)
  case signatureCreateFailed(status: Darwin.OSStatus)
  case signatureVerifyFailed(status: Darwin.OSStatus)
  case keyRepresentationFailed(error: CoreFoundation.CFError?)
}
@objc @_inheritsConvenienceInitializers public class TempoIndoorVController : UIKit.UIViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, Tempo_ios_sdk.StoreSubscriber {
  @objc override dynamic open func viewDidLoad()
  @objc deinit
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  public func drawCenter(centerId: Swift.Int)
  @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  public func newState(state: Tempo_ios_sdk.AppState)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  public typealias StoreSubscriberStateType = Tempo_ios_sdk.AppState
}
public let defaultReadChunkSize: Swift.UInt32
public let defaultWriteChunkSize: Swift.UInt32
public let defaultFilePermissions: Swift.UInt16
public let defaultDirectoryPermissions: Swift.UInt16
public enum CompressionMethod : Swift.UInt16 {
  case none
  case deflate
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
  public init?(rawValue: Swift.UInt16)
}
final public class Archive : Swift.Sequence {
  public enum ArchiveError : Swift.Error {
    case unreadableArchive
    case unwritableArchive
    case invalidEntryPath
    case invalidCompressionMethod
    case invalidStartOfCentralDirectoryOffset
    case missingEndOfCentralDirectoryRecord
    case cancelledOperation
    public static func == (a: Tempo_ios_sdk.Archive.ArchiveError, b: Tempo_ios_sdk.Archive.ArchiveError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum AccessMode : Swift.UInt {
    case create
    case read
    case update
    public typealias RawValue = Swift.UInt
    public init?(rawValue: Swift.UInt)
    public var rawValue: Swift.UInt {
      get
    }
  }
  final public let url: Foundation.URL
  final public let accessMode: Tempo_ios_sdk.Archive.AccessMode
  public init?(url: Foundation.URL, accessMode mode: Tempo_ios_sdk.Archive.AccessMode, preferredEncoding: Swift.String.Encoding? = nil)
  @objc deinit
  final public func makeIterator() -> Swift.AnyIterator<Tempo_ios_sdk.Entry>
  final public subscript(path: Swift.String) -> Tempo_ios_sdk.Entry? {
    get
  }
  public typealias Element = Tempo_ios_sdk.Entry
  public typealias Iterator = Swift.AnyIterator<Tempo_ios_sdk.Entry>
}
extension Archive {
  final public func totalUnitCountForRemoving(_ entry: Tempo_ios_sdk.Entry) -> Swift.Int64
  final public func totalUnitCountForReading(_ entry: Tempo_ios_sdk.Entry) -> Swift.Int64
  final public func totalUnitCountForAddingItem(at url: Foundation.URL) -> Swift.Int64
}
public enum JWTAlgorithm : Swift.CustomStringConvertible {
  case none
  case rs256(Tempo_ios_sdk.RSAKey)
  case rs384(Tempo_ios_sdk.RSAKey)
  case rs512(Tempo_ios_sdk.RSAKey)
  case hs256(Swift.String)
  case hs384(Swift.String)
  case hs512(Swift.String)
  public var description: Swift.String {
    get
  }
  public func sign(message: Swift.String) -> Swift.String?
  public func verify(base64EncodedSignature: Swift.String, rawMessage: Swift.String) throws -> Swift.Bool
}
extension Archive {
  final public func addEntry(with path: Swift.String, relativeTo baseURL: Foundation.URL, compressionMethod: Tempo_ios_sdk.CompressionMethod = .none, bufferSize: Swift.UInt32 = defaultWriteChunkSize, progress: Foundation.Progress? = nil) throws
  final public func addEntry(with path: Swift.String, type: Tempo_ios_sdk.Entry.EntryType, uncompressedSize: Swift.UInt32, modificationDate: Foundation.Date = Date(), permissions: Swift.UInt16? = nil, compressionMethod: Tempo_ios_sdk.CompressionMethod = .none, bufferSize: Swift.UInt32 = defaultWriteChunkSize, progress: Foundation.Progress? = nil, provider: (Swift.Int, Swift.Int) throws -> Foundation.Data) throws
  final public func remove(_ entry: Tempo_ios_sdk.Entry, bufferSize: Swift.UInt32 = defaultReadChunkSize, progress: Foundation.Progress? = nil) throws
}
@_hasMissingDesignatedInitializers public class TempoSDK {
  public static let shared: Tempo_ios_sdk.TempoSDK
  public var user_id: Swift.String {
    get
  }
  public var centerID: Swift.Int {
    get
  }
  public var LICENCE_CARTO: Swift.String {
    get
  }
  public var TEMPO_SECRET: Swift.String {
    get
  }
  public var SITUM_LICENSE: Swift.String {
    get
  }
  public var SITUM_USER: Swift.String {
    get
  }
  public var ENVIRONMENT: Swift.String {
    get
  }
  public typealias DepartmentsAvailableResponse = [Swift.String : Swift.Bool]
  public func setLicenceCarto(licence: Swift.String)
  public func setTempoSecret(key: Swift.String)
  public func setSitumLicence(licence: Swift.String)
  public func setSitumUser(key: Swift.String)
  public func setEnvironment(env: Swift.String)
  public func setUserID(userId: Swift.String)
  public func setCenterID(center: Swift.Int)
  public func addDynamicPoints(centerId: Swift.Int, dynamicPoints: [Tempo_ios_sdk.TempoDynamicPoint])
  public func clearDynamicPoints(centerId: Swift.Int)
  public func getMapView() -> Tempo_ios_sdk.TempoIndoorVController
  public func setFCMToken(fcmToken: Swift.String)
  public func isDepartmentRouteAvailable(centerID: Swift.Int, departmentID: Swift.String, completion: ((Swift.Bool) -> Swift.Void)?)
  public func isDepartmentsRouteAvailable(centerID: Swift.Int, departmentsIDs: [Swift.String], completion: ((Tempo_ios_sdk.TempoSDK.DepartmentsAvailableResponse) -> Swift.Void)?)
  public func routeToDepartment(centerID: Swift.Int, departmentID: Swift.String)
  public func initGeofencing()
  public func getCentersWithIndoorEnabled(completion: @escaping (Swift.Result<[Swift.Int : Tempo_ios_sdk.IndoorCenter], Swift.Error>) -> Swift.Void)
  @objc deinit
}
open class Tempo_Store<State> : Tempo_ios_sdk.StoreType where State : Tempo_ios_sdk.StateType {
  public var state: State! {
    get
    set
  }
  public var dispatchFunction: Tempo_ios_sdk.DispatchFunction!
  required public init(reducer: @escaping Tempo_ios_sdk.Reducer<State>, state: State?, middleware: [Tempo_ios_sdk.Middleware<State>] = [], automaticallySkipsRepeats: Swift.Bool = true)
  open func subscribe<S>(_ subscriber: S) where State == S.StoreSubscriberStateType, S : Tempo_ios_sdk.StoreSubscriber
  open func subscribe<SelectedState, S>(_ subscriber: S, transform: ((Tempo_ios_sdk.Subscription<State>) -> Tempo_ios_sdk.Subscription<SelectedState>)?) where SelectedState == S.StoreSubscriberStateType, S : Tempo_ios_sdk.StoreSubscriber
  open func unsubscribe(_ subscriber: Tempo_ios_sdk.AnyStoreSubscriber)
  open func _defaultDispatch(action: Tempo_ios_sdk.Action)
  open func dispatch(_ action: Tempo_ios_sdk.Action)
  @available(*, deprecated, message: "Deprecated in favor of https://github.com/ReSwift/ReSwift-Thunk")
  open func dispatch(_ actionCreatorProvider: @escaping Tempo_ios_sdk.Tempo_Store<State>.ActionCreator)
  @available(*, deprecated, message: "Deprecated in favor of https://github.com/ReSwift/ReSwift-Thunk")
  open func dispatch(_ asyncActionCreatorProvider: @escaping Tempo_ios_sdk.Tempo_Store<State>.AsyncActionCreator)
  @available(*, deprecated, message: "Deprecated in favor of https://github.com/ReSwift/ReSwift-Thunk")
  open func dispatch(_ actionCreatorProvider: @escaping Tempo_ios_sdk.Tempo_Store<State>.AsyncActionCreator, callback: Tempo_ios_sdk.Tempo_Store<State>.DispatchCallback?)
  public typealias DispatchCallback = (State) -> Swift.Void
  @available(*, deprecated, message: "Deprecated in favor of https://github.com/ReSwift/ReSwift-Thunk")
  public typealias ActionCreator = (State, Tempo_ios_sdk.Tempo_Store<State>) -> Tempo_ios_sdk.Action?
  @available(*, deprecated, message: "Deprecated in favor of https://github.com/ReSwift/ReSwift-Thunk")
  public typealias AsyncActionCreator = (State, Tempo_ios_sdk.Tempo_Store<State>, @escaping (((State, Tempo_ios_sdk.Tempo_Store<State>) -> Tempo_ios_sdk.Action?) -> Swift.Void)) -> Swift.Void
  @objc deinit
}
extension Tempo_Store {
  open func subscribe<SelectedState, S>(_ subscriber: S, transform: ((Tempo_ios_sdk.Subscription<State>) -> Tempo_ios_sdk.Subscription<SelectedState>)?) where SelectedState : Swift.Equatable, SelectedState == S.StoreSubscriberStateType, S : Tempo_ios_sdk.StoreSubscriber
}
extension Tempo_Store where State : Swift.Equatable {
  open func subscribe<S>(_ subscriber: S) where State == S.StoreSubscriberStateType, S : Tempo_ios_sdk.StoreSubscriber
}
@_inheritsConvenienceInitializers @objc(Building) public class Building : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Building {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Tempo_ios_sdk.Building>
  @objc @NSManaged dynamic public var basemapDateTI: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var basemapUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centerCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var default_floor_id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasReady: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idBuilding: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ips_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var navigationDateTI: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var navigationUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var radius: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var spacesSaved: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var center: Tempo_ios_sdk.Coordinate? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var departments: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floor: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var points: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var polygon: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var services: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension Building {
  @objc(addDepartmentsObject:) @NSManaged dynamic public func addToDepartments(_ value: Tempo_ios_sdk.Department)
  @objc(removeDepartmentsObject:) @NSManaged dynamic public func removeFromDepartments(_ value: Tempo_ios_sdk.Department)
  @objc(addDepartments:) @NSManaged dynamic public func addToDepartments(_ values: Foundation.NSSet)
  @objc(removeDepartments:) @NSManaged dynamic public func removeFromDepartments(_ values: Foundation.NSSet)
}
extension Building {
  @objc(addFloorObject:) @NSManaged dynamic public func addToFloor(_ value: Tempo_ios_sdk.Floor)
  @objc(removeFloorObject:) @NSManaged dynamic public func removeFromFloor(_ value: Tempo_ios_sdk.Floor)
  @objc(addFloor:) @NSManaged dynamic public func addToFloor(_ values: Foundation.NSSet)
  @objc(removeFloor:) @NSManaged dynamic public func removeFromFloor(_ values: Foundation.NSSet)
}
extension Building {
  @objc(addPointsObject:) @NSManaged dynamic public func addToPoints(_ value: Tempo_ios_sdk.DynamicPoint)
  @objc(removePointsObject:) @NSManaged dynamic public func removeFromPoints(_ value: Tempo_ios_sdk.DynamicPoint)
  @objc(addPoints:) @NSManaged dynamic public func addToPoints(_ values: Foundation.NSSet)
  @objc(removePoints:) @NSManaged dynamic public func removeFromPoints(_ values: Foundation.NSSet)
}
extension Building {
  @objc(addPolygonObject:) @NSManaged dynamic public func addToPolygon(_ value: Tempo_ios_sdk.Coordinate)
  @objc(removePolygonObject:) @NSManaged dynamic public func removeFromPolygon(_ value: Tempo_ios_sdk.Coordinate)
  @objc(addPolygon:) @NSManaged dynamic public func addToPolygon(_ values: Foundation.NSSet)
  @objc(removePolygon:) @NSManaged dynamic public func removeFromPolygon(_ values: Foundation.NSSet)
}
extension Building {
  @objc(addServicesObject:) @NSManaged dynamic public func addToServices(_ value: Tempo_ios_sdk.Service)
  @objc(removeServicesObject:) @NSManaged dynamic public func removeFromServices(_ value: Tempo_ios_sdk.Service)
  @objc(addServices:) @NSManaged dynamic public func addToServices(_ values: Foundation.NSSet)
  @objc(removeServices:) @NSManaged dynamic public func removeFromServices(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(Coordinate) public class Coordinate : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Coordinate {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Tempo_ios_sdk.Coordinate>
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var order: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isCenter: Tempo_ios_sdk.Building? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isPolygon: Tempo_ios_sdk.Building? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(Department) public class Department : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Department {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Tempo_ios_sdk.Department>
  @objc @NSManaged dynamic public var area: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cartodbID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var codeCenter: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var codeElement: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var height: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lat: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var level: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lon: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuDep: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var building: Tempo_ios_sdk.Building? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(DynamicPoint) public class DynamicPoint : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DynamicPoint {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Tempo_ios_sdk.DynamicPoint>
  @objc @NSManaged dynamic public var cornerID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDateTI: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endMapTI: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idPoint: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var img: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var itsDescript: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lat: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var level: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lon: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var originalPrice: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var price: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var radius: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var showRoute: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var starDateTI: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startMapTI: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subtitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var thumbnailUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var building: Tempo_ios_sdk.Building? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(Floor) public class Floor : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Floor {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Tempo_ios_sdk.Floor>
  @objc @NSManaged dynamic public var code: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ips_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isDefault: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isFloor: Tempo_ios_sdk.Building? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(OLDChat) public class OLDChat : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension OLDChat {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Tempo_ios_sdk.OLDChat>
  @objc @NSManaged dynamic public var with: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var messages: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension OLDChat {
  @objc(addMessagesObject:) @NSManaged dynamic public func addToMessages(_ value: Tempo_ios_sdk.OLDMessage)
  @objc(removeMessagesObject:) @NSManaged dynamic public func removeFromMessages(_ value: Tempo_ios_sdk.OLDMessage)
  @objc(addMessages:) @NSManaged dynamic public func addToMessages(_ values: Foundation.NSSet)
  @objc(removeMessages:) @NSManaged dynamic public func removeFromMessages(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(OLDMessage) public class OLDMessage : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension OLDMessage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Tempo_ios_sdk.OLDMessage>
  @objc @NSManaged dynamic public var content: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateTI: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isReceived: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSended: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ordinalDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var readed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var chat: Tempo_ios_sdk.OLDChat? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(Service) public class Service : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Service {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Tempo_ios_sdk.Service>
  @objc @NSManaged dynamic public var area: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cartodbID: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var height: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lat: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var level: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lon: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var building: Tempo_ios_sdk.Building? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var category: Tempo_ios_sdk.ServiceCategory? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(ServiceCategory) public class ServiceCategory : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ServiceCategory {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Tempo_ios_sdk.ServiceCategory>
  @objc @NSManaged dynamic public var balloonIcon: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descript: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var markerIcon: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var optionIcon: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var services: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension ServiceCategory {
  @objc(addServicesObject:) @NSManaged dynamic public func addToServices(_ value: Tempo_ios_sdk.Service)
  @objc(removeServicesObject:) @NSManaged dynamic public func removeFromServices(_ value: Tempo_ios_sdk.Service)
  @objc(addServices:) @NSManaged dynamic public func addToServices(_ values: Foundation.NSSet)
  @objc(removeServices:) @NSManaged dynamic public func removeFromServices(_ values: Foundation.NSSet)
}
extension Tempo_ios_sdk.Entry.EntryType : Swift.Equatable {}
extension Tempo_ios_sdk.Entry.EntryType : Swift.Hashable {}
extension Tempo_ios_sdk.Entry.EntryType : Swift.RawRepresentable {}
extension Tempo_ios_sdk.RSASignature.DigestType : Swift.Equatable {}
extension Tempo_ios_sdk.RSASignature.DigestType : Swift.Hashable {}
extension Tempo_ios_sdk.SwiftyCryptoRSAKeySize : Swift.Equatable {}
extension Tempo_ios_sdk.SwiftyCryptoRSAKeySize : Swift.Hashable {}
extension Tempo_ios_sdk.SwiftyCryptoRSAKeySize : Swift.RawRepresentable {}
extension Tempo_ios_sdk.HMACAlgorithm : Swift.Equatable {}
extension Tempo_ios_sdk.HMACAlgorithm : Swift.Hashable {}
extension Tempo_ios_sdk.RSAKeyType : Swift.Equatable {}
extension Tempo_ios_sdk.RSAKeyType : Swift.Hashable {}
extension Tempo_ios_sdk.AssistantState : Swift.Equatable {}
extension Tempo_ios_sdk.AssistantState : Swift.Hashable {}
extension Tempo_ios_sdk.CompressionMethod : Swift.Equatable {}
extension Tempo_ios_sdk.CompressionMethod : Swift.Hashable {}
extension Tempo_ios_sdk.CompressionMethod : Swift.RawRepresentable {}
extension Tempo_ios_sdk.Archive.ArchiveError : Swift.Equatable {}
extension Tempo_ios_sdk.Archive.ArchiveError : Swift.Hashable {}
extension Tempo_ios_sdk.Archive.AccessMode : Swift.Equatable {}
extension Tempo_ios_sdk.Archive.AccessMode : Swift.Hashable {}
extension Tempo_ios_sdk.Archive.AccessMode : Swift.RawRepresentable {}
